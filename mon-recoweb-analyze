#!/usr/bin/env bash
# NAME=mon-recoweb-analyse
# VERSION=1.0.0
# DESCRIPTION=Analyse les sorties de mon-recoweb et produit summary.txt et summary.md
# PRESENTATION_START
# mon-recoweb-analyse — Agrège whatweb.txt + summary_dirs.txt + summary_files.txt
# Produit deux fichiers lisibles pour inclusion dans un writeup :
#  - summary.txt (plain text, compact)
#  - summary.md  (markdown, structuré pour Hugo)
# Usage:
#   mon-recoweb-analyze <outdir>
#   mon-recoweb-analyze --target <outdir>
#   mon-recoweb-analyze            # tente d'inférer le dernier mon-recoweb_* dans PWD
# Intégration rapide : appeler 'mon-recoweb-analyze "${OUTDIR}"' depuis mon-recoweb lorsque
# l'utilisateur passe l'option --analyze.
# PRESENTATION_END

set -euo pipefail

# --- [AJOUT] Helpers version/usage compatibles template (sans rien casser) ---
__ms_self="${BASH_SOURCE[0]:-$0}"
if command -v readlink >/dev/null 2>&1; then
  __ms_resolved="$(readlink -f -- "$__ms_self" 2>/dev/null || true)"
  [ -n "$__ms_resolved" ] && __ms_self="$__ms_resolved"
fi
__ms_version_str(){
  # Lit '# VERSION=' dans CE fichier, format "<basename> vX.Y.Z" (1 ligne)
  local v b
  v="$(awk -F= '/^# *VERSION *=/ { gsub(/\r$/,"",$2); print $2; exit }' "$__ms_self" 2>/dev/null || true)"
  v="${v:-0.0.0}"
  b="$(basename "$__ms_self")"
  printf '%s v%s\n' "$b" "$v"
}
__ms_print_version_and_exit(){ __ms_version_str; exit 0; }
__ms_print_help_and_exit(){
  __ms_version_str
  usage
  exit 0
}
# Interception TÔT des options standard (avant toute I/O sur OUTDIR)
case "${1:-}" in
  -V|--version) __ms_print_version_and_exit ;;
  -h|--help)    __ms_print_help_and_exit   ;;
esac
# ---------------------------------------------------------------------------

_self="${BASH_SOURCE[0]:-$0}"
_self_base="$(basename "$_self")"
now_ts() { date -u +"%Y-%m-%dT%H:%M:%SZ"; }

usage(){
  cat <<EOF
Usage: $_self_base [--target <outdir>] | [<outdir>]
Si aucun outdir n'est fourni, le script tente de trouver le dossier mon-recoweb_* le plus récent dans le répertoire courant.
Produit: <outdir>/summary.txt et <outdir>/summary.md
EOF
}

# --- parse args ---
OUTDIR=""
if [[ $# -gt 0 ]]; then
  case "$1" in
    --target) OUTDIR="${2:-}"; shift 2 ;;
    -h|--help) usage; exit 0 ;;          # (conserve ton comportement existant)
    *) OUTDIR="$1"; shift ;;
  esac
fi

# infer outdir if empty
if [[ -z "$OUTDIR" ]]; then
  OUTDIR="$(ls -1dt mon-recoweb_* 2>/dev/null | head -n1 || true)"
  if [[ -z "$OUTDIR" ]]; then
    echo "Aucun dossier mon-recoweb_* trouvé dans $(pwd). Passez --target <outdir>." >&2
    exit 1
  fi
fi

# normalize
OUTDIR="${OUTDIR%/}"
if [[ ! -d "$OUTDIR" ]]; then
  echo "Dossier introuvable: $OUTDIR" >&2
  exit 2
fi

WHATWEB="$OUTDIR/whatweb.txt"
SUMDIRS="$OUTDIR/summary_dirs.txt"
SUMFILES="$OUTDIR/summary_files.txt"
OUT_TXT="$OUTDIR/summary.txt"
OUT_MD="$OUTDIR/summary.md"

missing=()
for f in "$WHATWEB" "$SUMDIRS" "$SUMFILES"; do
  [[ -s "$f" ]] || missing+=("$f")
done
if [[ ${#missing[@]} -gt 0 ]]; then
  echo "Attention : fichiers manquants ou vides:" >&2
  for m in "${missing[@]}"; do echo "  - $m" >&2; done
  echo "Le script produira néanmoins les résumés disponibles." >&2
fi

# helper : parse summary lines that look like: "200  len=123    /path"
parse_summary_lines(){
  # prints: status length url
  awk 'NF>=3 {
         status=$1; len="-"; url=$NF;
         for(i=2;i<=NF-1;i++){ if ($i ~ /^len=/) len=substr($i,5) }
         print status, len, url
       }' "$1" 2>/dev/null || true
}

# --- Build plain text summary ---
{
  echo "mon-recoweb analysis"
  echo "Outdir: $OUTDIR"
  echo "Generated: $(now_ts)"
  echo
  # WHATWEB
  echo "=== WHATWEB (raw) ==="
  if [[ -s "$WHATWEB" ]]; then
    sed -n '1,200p' "$WHATWEB"
  else
    echo "(absent)"
  fi
  echo
  # DIRECTORIES
  echo "=== DIRECTORIES (summary_dirs.txt) ==="
  if [[ -s "$SUMDIRS" ]]; then
    total_dirs=$(wc -l < "$SUMDIRS" | tr -d ' ')
    echo "Total lines: ${total_dirs}"
    echo
    echo "Status counts:"
    parse_summary_lines "$SUMDIRS" | awk '{counts[$1]++} END{for(c in counts) printf "%s: %d\n", c, counts[c]}' | sort -nr -k2
    echo
    echo "Top entries (unique):"
    parse_summary_lines "$SUMDIRS" | awk '{print $1, $3}' | sort -u | sed -n '1,50p'
  else
    echo "(aucun)"
  fi
  echo
  # FILES
  echo "=== FILES (summary_files.txt) ==="
  if [[ -s "$SUMFILES" ]]; then
    total_files=$(wc -l < "$SUMFILES" | tr -d ' ')
    echo "Total lines: ${total_files}"
    echo
    echo "Status counts:"
    parse_summary_lines "$SUMFILES" | awk '{counts[$1]++} END{for(c in counts) printf "%s: %d\n", c, counts[c]}' | sort -nr -k2
    echo
    echo "Top files by occurrence (unique):"
    parse_summary_lines "$SUMFILES" | awk '{print $1, $3}' | sort -u | sed -n '1,200p'
  else
    echo "(aucun)"
  fi
  echo
  echo "Notes:"
  echo " - Vérifier manuellement les entrées 200/301/302 pour faux positifs (pages d'erreur custom)."
  echo " - Pour un writeup, reprendre la section correspondante depuis summary.md (format Markdown)."
} > "$OUT_TXT"

# --- Build Markdown summary ---
{
  echo "# Résumé mon-recoweb — $(basename "$OUTDIR")"
  echo
  echo "_Généré : $(now_ts)_"
  echo
  echo "## Whatweb"
  if [[ -s "$WHATWEB" ]]; then
    echo '```'
    sed -n '1,400p' "$WHATWEB"
    echo '```'
  else
    echo "(absent)"
  fi
  echo
  echo "## Répertoires détectés"
  if [[ -s "$SUMDIRS" ]]; then
    total_dirs=$(wc -l < "$SUMDIRS" | tr -d ' ')
    echo "- Total d'entrées : **${total_dirs}**"
    echo
    echo "### Statuts"
    parse_summary_lines "$SUMDIRS" | awk '{counts[$1]++} END{for(c in counts) printf "- %s : %d\n", c, counts[c]}' | sort -t: -k2 -nr
    echo
    echo "### Liste"
    parse_summary_lines "$SUMDIRS" | awk '{print "- `" $3 "` — statut " $1}' | sort -u | sed -n '1,100p'
  else
    echo "(aucun)"
  fi
  echo
  echo "## Fichiers détectés (par extension)"
  if [[ -s "$SUMFILES" ]]; then
    total_files=$(wc -l < "$SUMFILES" | tr -d ' ')
    echo "- Total d'entrées : **${total_files}**"
    echo
    echo "### Statuts"
    parse_summary_lines "$SUMFILES" | awk '{counts[$1]++} END{for(c in counts) printf "- %s : %d\n", c, counts[c]}' | sort -t: -k2 -nr
    echo
    echo "### Liste"
    parse_summary_lines "$SUMFILES" | awk '{print "- `" $3 "` — statut " $1}' | sort -u | sed -n '1,200p'
  else
    echo "(aucun)"
  fi
  echo
  echo "## Recommandations rapides"
  echo '- Vérifier `robots.txt`, `sitemap.xml`, et tout `.git` accessible.'
  echo "- Reprendre en priorité les URLs 200 contenant des extensions source (.php, .bak, .sql.txt, etc.)."
  echo
  echo "---"
  echo "*Fichier généré automatiquement par mon-recoweb-analyze.*"
} > "$OUT_MD"

# --- Final report (affichage clair, sans \n littéraux) ---
echo "OK — analyses enregistrées dans :"
echo "$OUTDIR"
echo
echo "Produits :"
echo "  - $OUT_TXT"
echo "  - $OUT_MD"
echo
echo "Astuce d'intégration rapide :"
echo " - placez ce script dans le même dossier que mon-recoweb et rendez-le exécutable :"
echo "   chmod +x mon-recoweb-analyze"
echo " - dans mon-recoweb, appelez-le après la génération des fichiers :"
echo '   mon-recoweb-analyze "${OUTDIR}"'

exit 0
