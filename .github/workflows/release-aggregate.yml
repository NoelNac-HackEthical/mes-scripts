name: release-aggregate (dynamic execution)

on:
  push:
    branches: [ "main" ]
    paths:
      - "*"
      - "!README*"
      - "!LICENSE*"
      - "!.github/**"
      - "!templates/**"
      - "!tools/**"
  workflow_dispatch:
    inputs:
      scope:
        description: "Scope of scripts to process (auto=changed only, all=all scripts, none=no scripts, list=explicit list)"
        type: choice
        default: auto
        options:
          - auto
          - all
          - none
          - list
      scripts:
        description: "Comma-separated list of scripts (only if scope=list)"
        required: false
        type: string
      target-branch:
        description: "Branche cible de hugo-demo (optionnel). Si vide, auto-détection."
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-aggregate
  cancel-in-progress: false

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set timezone (Europe/Brussels)
        run: sudo timedatectl set-timezone Europe/Brussels

      - name: Prepare environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl coreutils

      # === Ton énorme bloc "Aggregate & publish release (inline)" inchangé ===
      - name: Aggregate & publish release (inline)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RETAIN: "5"
        run: |
          # ... contenu inchangé ...
          echo "Release published and sanity checked."

      - name: Build payload for hugo site (dynamic execution)
        id: build_payload
        shell: bash
        run: |
          # ... contenu inchangé qui génère payload.json ...
          echo "Payload built:"
          jq -c '.' payload.json

      # === Ajout : résolution automatique de la branche cible ===
      - name: Resolve target branch for hugo-demo
        id: resolve
        env:
          GH_TOKEN: ${{ secrets.HUGO_DEMO_TOKEN }}
          TARGET_REPO: ${{ vars.TARGET_HUGO_REPO }}
          INPUT_BRANCH: ${{ github.event.inputs.target-branch || '' }}
        run: |
          set -euo pipefail

          if [ -n "${INPUT_BRANCH}" ]; then
            echo "branch=${INPUT_BRANCH}" >> "$GITHUB_OUTPUT"
            echo "origin=input" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          REPO_INFO=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" \
                           -H "Accept: application/vnd.github+json" \
                           "https://api.github.com/repos/${TARGET_REPO}")
          DEFAULT=$(printf '%s' "$REPO_INFO" | jq -r '.default_branch')

          PULLS=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" \
                       -H "Accept: application/vnd.github+json" \
                       "https://api.github.com/repos/${TARGET_REPO}/pulls?state=open&per_page=50")

          COUNT=$(printf '%s' "$PULLS" | jq 'length')
          if [ "$COUNT" -eq 0 ]; then
            echo "branch=${DEFAULT}" >> "$GITHUB_OUTPUT"
            echo "origin=default-branch" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ "$COUNT" -eq 1 ]; then
            BR=$(printf '%s' "$PULLS" | jq -r '.[0].head.ref')
            echo "branch=${BR}" >> "$GITHUB_OUTPUT"
            echo "origin=single-pr" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Option B : choisir la PR la plus récente
          BR=$(printf '%s' "$PULLS" | jq -r 'sort_by(.updated_at) | last(.).head.ref')
          echo "branch=${BR}" >> "$GITHUB_OUTPUT"
          echo "origin=latest-pr" >> "$GITHUB_OUTPUT"

      - name: Inject branch into payload
        run: |
          jq --arg tb "${{ steps.resolve.outputs.branch }}" '. + {target_branch:$tb}' payload.json > payload.new
          mv payload.new payload.json
          echo "Payload now includes target_branch=${{ steps.resolve.outputs.branch }}"
          cat payload.json

      - name: Dispatch to hugo site (no clone)
        env:
          TARGET_HUGO_REPO: ${{ vars.TARGET_HUGO_REPO }}
          HUGO_DEMO_TOKEN: ${{ secrets.HUGO_DEMO_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          OWNER="$(echo "$TARGET_HUGO_REPO" | cut -d/ -f1)"
          NAME="$(echo "$TARGET_HUGO_REPO" | cut -d/ -f2)"
          BODY=$(printf '{"event_type":"mes-scripts-release","client_payload":%s}' "$(cat payload.json)")

          HTTP_CODE="$(curl -sS -o /tmp/resp.json -w '%{http_code}' -X POST \
            -H 'Accept: application/vnd.github+json' \
            -H "Authorization: Bearer ${HUGO_DEMO_TOKEN}" \
            "https://api.github.com/repos/${OWNER}/${NAME}/dispatches" \
            -d "$BODY")"

          echo "Réponse HTTP: $HTTP_CODE"
          cat /tmp/resp.json || true
          [ "$HTTP_CODE" = "204" ] || { echo "::error ::Échec repository_dispatch"; exit 1; }
