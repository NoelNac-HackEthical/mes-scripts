name: release-aggregate (dynamic execution)

on:
  push:
    branches: [ "main" ]
    paths:
      - "*"
      - "!README*"
      - "!LICENSE*"
      - "!.github/**"
      - "!templates/**"
      - "!tools/**"
  workflow_dispatch:
    inputs:
      scope:
        description: "Scope of scripts to process (auto=changed only, all=all scripts, none=no scripts, list=explicit list)"
        type: choice
        default: auto
        options:
          - auto
          - all
          - none
          - list
      scripts:
        description: "Comma-separated list of scripts (only if scope=list)"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: release-aggregate
  cancel-in-progress: false

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set timezone (Europe/Brussels)
        run: sudo timedatectl set-timezone Europe/Brussels

      - name: Prepare environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl coreutils

      # Agrégation / publication de la release (inline)
      - name: Aggregate & publish release (inline)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RETAIN: "5"
        run: |
          set -euo pipefail
          IFS=$'\n\t'

          die(){ echo "✖ $*" >&2; exit 1; }
          log(){ echo "• $*"; }

          OWNER_REPO="$(git config --get remote.origin.url | sed -E 's#.*github.com[:/](.+/.+)(\.git)?#\1#')"
          [ -n "${OWNER_REPO:-}" ] || die "Cannot determine owner/repo"

          # Detect scope
          SCOPE="${{ github.event.inputs.scope || 'auto' }}"
          SCRIPTS_INPUT="${{ github.event.inputs.scripts || '' }}"
          log "Run scope: $SCOPE"
          [ -n "$SCOPE" ] || SCOPE="auto"

          # Candidate scripts = all files with shebang + VERSION
          mapfile -t ALL_SCRIPTS < <(
            git ls-files \
              | grep -v -E '^(.github/|templates/|tools/|README|LICENSE)' \
              | grep -v -E '\.sha256$' \
              | while read -r f; do
                  [ -f "$f" ] || continue
                  head -n1 "$f" | grep -q '^#!' || continue
                  grep -q -m1 -E '^#\s*VERSION=' "$f" || continue
                  echo "$f"
                done
          )
          [ ${#ALL_SCRIPTS[@]} -gt 0 ] || die "No scripts detected (missing '# VERSION=' lines?)"

          # Determine changed scripts
          mapfile -t CHANGED_FILES < <(
            if [ "${{ github.event_name }}" = "push" ]; then
              git diff --name-only "${{ github.event.before }}" HEAD
            else
              git diff --name-only HEAD^ HEAD
            fi
          )
          declare -A changedSet=()
          for f in "${CHANGED_FILES[@]}"; do
            changedSet["$f"]=1
          done

          # Select scripts according to scope
          SCRIPTS=()
          case "$SCOPE" in
            none)
              log "Manual run scope=none → no scripts will be processed."
              ;;
            all)
              SCRIPTS=("${ALL_SCRIPTS[@]}")
              ;;
            auto)
              for f in "${ALL_SCRIPTS[@]}"; do
                if [[ -n "${changedSet[$f]:-}" ]]; then
                  SCRIPTS+=("$f")
                fi
              done
              ;;
            list)
              IFS=',' read -ra wanted <<<"$SCRIPTS_INPUT"
              for w in "${wanted[@]}"; do
                w="$(echo "$w" | xargs)" # trim
                [ -n "$w" ] || continue
                if [[ " ${ALL_SCRIPTS[*]} " == *" $w "* ]]; then
                  SCRIPTS+=("$w")
                else
                  log "⚠ Script '$w' not found in repo"
                fi
              done
              ;;
            *)
              die "Unknown scope: $SCOPE"
              ;;
          esac

          log "Changed files:"
          printf '%s\n' "${CHANGED_FILES[@]}" || true
          log "Changed scripts to process:"
          printf '%s\n' "${SCRIPTS[@]}" || true

          NOTES="$(mktemp)"
          FILES_TO_UPLOAD=()

          {
            echo "## Scripts et versions"
            echo
            echo "| Script | Version |"
            echo "|-------:|:--------|"
          } > "$NOTES"

          for f in "${SCRIPTS[@]}"; do
            name="$(basename "$f")"
            ver="$(grep -m1 -E '^#\s*VERSION=' "$f" | sed -E 's/^#\s*VERSION=//')"
            [ -n "$ver" ] || ver="inconnue"

            if command -v sha256sum >/dev/null 2>&1; then
              hash="$(sha256sum "$f" | awk '{print tolower($1)}')"
            elif command -v shasum >/dev/null 2>&1; then
              hash="$(shasum -a 256 "$f" | awk '{print $1}')"
            else
              hash="unknown"
            fi

            printf "%s  %s\n" "$hash" "$name" > "$f.sha256"
            FILES_TO_UPLOAD+=( "$f" "$f.sha256" )
            printf "| \`%s\` | \`%s\` |\n" "$name" "$ver" >> "$NOTES"
          done

          year=$(date +%Y); month=$(date +%m); day=$(date +%d)
          hour=$(date +%H);  min=$(date +%M)
          moisNoms=( "" "janvier" "février" "mars" "avril" "mai" "juin" "juillet" "août" "septembre" "octobre" "novembre" "décembre" )
          moisIdx=$((10#$month))
          date_fr="${day} ${moisNoms[$moisIdx]} ${year} ${hour}h${min}"

          TAG="r-${year}-${month}-${day}-${hour}${min}"
          TITLE="Mes scripts au ${date_fr}"

          echo -e "\n---"
          echo "Tag      : $TAG"
          echo "Titre    : $TITLE"
          echo "Repo     : $OWNER_REPO"
          echo "Scripts  : ${#SCRIPTS[@]}"
          echo "---"

          if ! command -v gh >/dev/null 2>&1; then
            die "GitHub CLI (gh) is required on the runner"
          fi

          if gh release view "$TAG" >/dev/null 2>&1; then
            log "Tag $TAG already exists – deleting release and tag"
            gh release delete "$TAG" -y || true
            git push origin ":refs/tags/$TAG" || true
          fi

          if [ ${#SCRIPTS[@]} -gt 0 ]; then
            gh release create "$TAG" \
              --title "$TITLE" \
              --notes-file "$NOTES" \
              --latest \
              "${FILES_TO_UPLOAD[@]}"
          else
            gh release create "$TAG" \
              --title "$TITLE" \
              --notes-file "$NOTES" \
              --latest
          fi

          log "Release $TAG published with ${#FILES_TO_UPLOAD[@]} assets."

          RETAIN="${RETAIN:-5}"
          log "Pruning releases beyond the most recent ${RETAIN}…"

          gh api -H "Accept: application/vnd.github+json" "/repos/${OWNER_REPO}/releases?per_page=100" \
            | jq -r '.[].tag_name' | awk 'NF' | nl -ba \
            | while read -r idx tag; do
                if [ "$idx" -gt "$RETAIN" ]; then
                  log "  - deleting $tag"
                  gh release delete "$tag" -y || true
                  git push origin ":refs/tags/$tag" || true
                fi
              done

          log "Done."
