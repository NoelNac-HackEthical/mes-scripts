name: release-aggregate

on:
  push:
    branches: [ "main" ]
    paths:
      - "*"
      - "!README*"
      - "!LICENSE*"
      - "!.github/**"
      - "!templates/**"
      - "!tools/**"
  workflow_dispatch: {}

permissions:
  contents: write   # tags + releases

concurrency:
  group: release-aggregate
  cancel-in-progress: false

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set timezone (Europe/Brussels)
        run: sudo timedatectl set-timezone Europe/Brussels

      - name: Prepare environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      # ðŸ‘‰ ton script existant qui fabrique/agrÃ¨ge la release
      - name: Aggregate & publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RETAIN: "5"            # garder uniquement les 5 derniÃ¨res releases (si gÃ©rÃ© par ton script)
          BRANCH_DEFAULT: "main"
        run: |
          bash .github/scripts/aggregate_release.sh

      # ðŸ‘‰ NOUVEAU : construire un payload avec URLs + SHA256 + VERSION (depuis # VERSION= du script)
      - name: Build payload for hugo site (with asset URLs + script versions)
        id: build_payload
        shell: bash
        run: |
          set -euo pipefail

          REPO="${{ github.repository }}"  # ex: NoelNac-HackEthical/mes-scripts
          API="https://api.github.com/repos/${REPO}/releases/latest"

          # RÃ©cupÃ©rer le JSON de la release "latest"
          JSON="$(curl -sSL -H "Accept: application/vnd.github+json" "$API")"
          TAG="$(echo "$JSON" | jq -r '.tag_name')"

          # Tableau des assets (name + browser_download_url)
          ASSETS_JSON="$(echo "$JSON" | jq -c '[.assets[] | {name: .name, url: .browser_download_url}]')"

          # Scripts = noms sans .sha256
          SCRIPTS_JSON="$(echo "$ASSETS_JSON" | jq -r '[.[].name] | map(select(test("\\.sha256$")|not))')"

          # Map initiale { "script": {"url":"...", "sha256":"..."} }
          MAP="$(jq -n --argjson assets "$ASSETS_JSON" '
            ($assets | map(select(.name|test("\\.sha256$")|not))) as $bins
            | ($assets | map(select(.name|test("\\.sha256$")))) as $hashes
            | reduce $bins[] as $b ({}; .[$b.name] = {url: $b.url})
            | reduce $hashes[] as $h (.;
                .[ ($h.name|sub("\\.sha256$";"")) ] += {sha256: $h.url}
              )
          ')"

          # Extraire VERSION depuis le contenu de chaque script (premiÃ¨re ligne '# VERSION=')
          TMPDIR="$(mktemp -d)"
          cleanup(){ rm -rf "$TMPDIR"; }
          trap cleanup EXIT

          for s in $(echo "$SCRIPTS_JSON" | jq -r '.[]'); do
            url="$(echo "$MAP" | jq -r --arg s "$s" '.[$s].url')"
            ver="unknown"
            if [ -n "$url" ] && curl -sSL "$url" -o "$TMPDIR/$s"; then
              ver="$(grep -m1 -E '^# *VERSION *= *' "$TMPDIR/$s" | sed -E 's/^# *VERSION *= *//' | tr -d '\r' || true)"
              ver="${ver:-unknown}"
            fi
            MAP="$(echo "$MAP" | jq --arg s "$s" --arg v "$ver" '.[$s].version = $v')"
          done

          # Payload final
          printf '{"source_repo":"%s","release_tag":"%s","scripts":%s,"assets":%s}\n' \
            "$REPO" "$TAG" "$SCRIPTS_JSON" "$MAP" > payload.json

          echo "Payload built:"
          cat payload.json

      # ðŸ‘‰ Envoi Ã  hugo-demo (no clone)
      - name: Dispatch to hugo site (no clone)
        env:
          TARGET_HUGO_REPO: ${{ vars.TARGET_HUGO_REPO }}       # ex: NoelNac-HackEthical/hugo-demo
          HUGO_DEMO_TOKEN: ${{ secrets.HUGO_DEMO_TOKEN }}      # PAT classic scope public_repo
        shell: bash
        run: |
          set -euo pipefail

          OWNER="$(echo "$TARGET_HUGO_REPO" | cut -d/ -f1)"
          NAME="$(echo "$TARGET_HUGO_REPO" | cut -d/ -f2)"
          BODY=$(printf '{"event_type":"mes-scripts-release","client_payload":%s}' "$(cat payload.json)")

          HTTP_CODE="$(curl -sS -o /tmp/resp.json -w '%{http_code}' -X POST \
            -H 'Accept: application/vnd.github+json' \
            -H "Authorization: Bearer ${HUGO_DEMO_TOKEN}" \
            "https://api.github.com/repos/${OWNER}/${NAME}/dispatches" \
            -d "$BODY")"

          echo "RÃ©ponse HTTP: $HTTP_CODE"
          cat /tmp/resp.json || true

          case "$HTTP_CODE" in
            204) echo "repository_dispatch envoyÃ© avec succÃ¨s." ;;
            *) echo "::error ::Ã‰chec repository_dispatch (HTTP $HTTP_CODE)"; exit 1 ;;
          esac
