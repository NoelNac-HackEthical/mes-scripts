#!/usr/bin/env bash
set -euo pipefail
LC_ALL=C

# mon-subdomains (HTB) — v3.8
# Modes : -f/--fast (1000, défaut)  -m/--medium (2000)  -l/--large (5000)  --custom FILE
# Opts  : -t N (threads, défaut 50)  --timeout S (défaut 8)  --debug  -h/--help

GREEN="\e[32m"; BLUE="\e[34m"; YELLOW="\e[33m"; RESET="\e[0m"
ok(){ echo -e "${GREEN}[✓]${RESET} $*"; }
info(){ echo -e "${BLUE}[*]${RESET} $*"; }
warn(){ echo -e "${YELLOW}[!]${RESET} $*"; }

usage(){ cat <<'EOF'
Usage:
  mon-subdomains <domaine.htb> [mode] [options]

Modes:
  -f, --fast      /usr/share/wordlists/htb-dns-vh-1000.txt (défaut)
  -m, --medium    /usr/share/wordlists/htb-dns-vh-2000.txt
  -l, --large     /usr/share/wordlists/htb-dns-vh-5000.txt
  --custom FILE   Wordlist personnalisée

Options:
  -t N            Threads (défaut: 50)
  --timeout S     Timeout HTTP en secondes (défaut: 8)
  --debug         Conserver les sorties brutes de ffuf
  -h, --help      Aide
EOF
}

# ----------- Parse args ------------
DOMAIN="${1-}"
[[ -z "${DOMAIN}" || "${DOMAIN}" == "-h" || "${DOMAIN}" == "--help" ]] && { usage; exit 0; }
shift || true

MODE="fast"; WL=""; THREADS=50; TIMEOUT=8; DEBUG=0
while (( "$#" )); do
  case "$1" in
    -f|--fast)   MODE="fast"; shift;;
    -m|--medium) MODE="medium"; shift;;
    -l|--large)  MODE="large"; shift;;
    --custom)    WL="${2-}"; MODE="custom"; shift 2;;
    -t)          THREADS="${2-}"; shift 2;;
    --timeout)   TIMEOUT="${2-}"; shift 2;;
    --debug)     DEBUG=1; shift;;
    -h|--help)   usage; exit 0;;
    *) warn "Option inconnue: $1"; usage; exit 1;;
  esac
done

# ----------- Wordlists par mode ------------
if [[ "$MODE" == "fast"   ]]; then WL="/usr/share/wordlists/htb-dns-vh-1000.txt"; fi
if [[ "$MODE" == "medium" ]]; then WL="/usr/share/wordlists/htb-dns-vh-2000.txt"; fi
if [[ "$MODE" == "large"  ]]; then WL="/usr/share/wordlists/htb-dns-vh-5000.txt"; fi

# ----------- Vérifs préalables ------------
[[ -z "$WL" || ! -f "$WL" ]] && { warn "Wordlist manquante pour le mode $MODE ($WL)."; exit 1; }
command -v gobuster >/dev/null || { warn "gobuster manquant"; exit 1; }
command -v ffuf     >/dev/null || { warn "ffuf manquant"; exit 1; }
command -v curl     >/dev/null || { warn "curl manquant"; exit 1; }

# ----------- Préparation dossier ------------
OUTDIR="mon-subdomains_${DOMAIN}"
mkdir -p "$OUTDIR"
ok "Dossier : $OUTDIR"
ok "Domaine : $DOMAIN"

TARGET_IP="$(getent hosts "$DOMAIN" | awk '{print $1}' | head -n1 || true)"
[[ -n "$TARGET_IP" ]] && ok "IP détectée : $TARGET_IP" || warn "IP non détectée"

ok "Mode : $(echo "$MODE" | tr a-z A-Z)  (wordlist: $WL)"

# ----------- Détection schéma HTTP/HTTPS ------------
SCHEME="http"; PORT=80; CURL_TLS=""; FFUF_TLS=""
probe(){ curl -sk --max-time "$TIMEOUT" -o /dev/null -w "%{http_code}" "$1" || true; }
if [[ "$(probe http://${DOMAIN}:80/)" == "000" ]]; then
  if [[ "$(probe https://${DOMAIN}:443/)" != "000" ]]; then
    SCHEME="https"; PORT=443; CURL_TLS="--insecure"; FFUF_TLS="-k"
  fi
fi
ok "Schéma/Port : ${SCHEME}/${PORT}"

DNS_TXT="$OUTDIR/dns_found.txt"
VHOST_TXT="$OUTDIR/vhost_found.txt"
SUMMARY_TXT="$OUTDIR/summary.txt"
FFUF_CSV="$OUTDIR/ffuf_vhosts.csv"
FFUF_TXT="$OUTDIR/ffuf_vhosts.txt"
: > "$DNS_TXT"; : > "$VHOST_TXT"; : > "$SUMMARY_TXT"

# ----------- DNS bruteforce (Gobuster v3+) ------------
info "Bruteforce DNS avec gobuster ..."
gobuster dns --domain "$DOMAIN" -w "$WL" -t "$THREADS" --no-color 2>/dev/null \
  | awk '/Found:/{print $2}' | tee -a "$DNS_TXT" >/dev/null || true
DNS_COUNT=$(grep -c '.' "$DNS_TXT" || true)
[[ "$DNS_COUNT" -gt 0 ]] && ok "DNS: ${DNS_COUNT} sous-domaines." || warn "DNS: rien trouvé."

# ----------- VHOST fuzzing (ffuf) — CSV puis fallback stdout ------------
extract_tokens() {
  # Lit stdin -> garde tokens [a-z0-9-] (1..63) -> suffixe .DOMAIN -> uniq
  awk 'NF{print $1}' \
  | tr -d '\r\t ' \
  | grep -E '^[a-z0-9-]{1,63}$' \
  | awk -v d="$DOMAIN" '{print $0 "." d}' \
  | sort -u
}

if [[ -n "${TARGET_IP-}" ]]; then
  info "VHOST fuzzing via ffuf ..."
  # 1) Tentative CSV silencieuse
  rm -f "$FFUF_CSV"
  ffuf -u "${SCHEME}://${TARGET_IP}:${PORT}/" $FFUF_TLS \
       -H "Host: FUZZ.${DOMAIN}" \
       -w "$WL" -t "$THREADS" -ac -r \
       -of csv -o "$FFUF_CSV" -s 1>/dev/null 2>/dev/null || true

  if [[ -s "$FFUF_CSV" ]]; then
    tail -n +2 "$FFUF_CSV" | cut -d',' -f1 | extract_tokens > "$VHOST_TXT" || true
  fi

  # 2) Fallback si rien trouvé en CSV : relance façon "console" (comme ton test manuel)
  if [[ ! -s "$VHOST_TXT" ]]; then
    if [[ $DEBUG -eq 1 ]]; then
      ffuf -u "${SCHEME}://${TARGET_IP}:${PORT}/" $FFUF_TLS \
           -H "Host: FUZZ.${DOMAIN}" \
           -w "$WL" -t "$THREADS" -ac \
           2>/dev/null | tee "$FFUF_TXT" \
           | awk '/\[Status:/{print $1}' | extract_tokens > "$VHOST_TXT" || true
    else
      ffuf -u "${SCHEME}://${TARGET_IP}:${PORT}/" $FFUF_TLS \
           -H "Host: FUZZ.${DOMAIN}" \
           -w "$WL" -t "$THREADS" -ac \
           2>/dev/null | awk '/\[Status:/{print $1}' | extract_tokens > "$VHOST_TXT" || true
    fi
  fi

  VHOST_COUNT=$(grep -c '.' "$VHOST_TXT" || true)
  [[ "$VHOST_COUNT" -gt 0 ]] && ok "VHOST: ${VHOST_COUNT} hôtes." || warn "VHOST: rien trouvé."
else
  warn "Pas d'IP → VHOST fuzzing sauté."
fi

# ----------- Résumé texte ------------
{
  echo "=== mon-subdomains (${DOMAIN}) ==="
  echo "Date: $(date '+%F %T')"
  [[ -n "${TARGET_IP-}" ]] && echo "IP: ${TARGET_IP}"
  echo "Schéma/Port: ${SCHEME}/${PORT}"
  echo "Wordlist: ${WL}"
  echo
  echo "DNS (${DNS_COUNT})"
  [[ -s "$DNS_TXT" ]] && sed 's/^/  - /' "$DNS_TXT" || echo "  - (aucun)"
  echo
  echo "VHOST ($(grep -c '.' "$VHOST_TXT" || true))"
  [[ -s "$VHOST_TXT" ]] && sed 's/^/  - /' "$VHOST_TXT" || echo "  - (aucun)"
  if [[ $DEBUG -eq 1 ]]; then
    echo
    echo "--- Debug ---"
    [[ -f "$FFUF_CSV" ]] && echo "CSV: $FFUF_CSV"
    [[ -f "$FFUF_TXT" ]] && echo "TXT: $FFUF_TXT"
  fi
} > "$SUMMARY_TXT"

# ----------- Affichage synthèse ------------
[[ -s "$DNS_TXT" ]] && { echo -e "${GREEN}[✓]${RESET} DNS trouvés :"; sed 's/^/   • /' "$DNS_TXT"; }
[[ -s "$VHOST_TXT" ]] && { echo -e "${GREEN}[✓]${RESET} VHOST trouvés :"; sed 's/^/   • /' "$VHOST_TXT"; }
