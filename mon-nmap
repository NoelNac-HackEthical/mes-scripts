#!/bin/bash
# NAME=mon-nmap
# VERSION=2.0.0
# DESCRIPTION=Automatise une s√©rie de scans Nmap (TCP full, scan agressif, UDP) et g√©n√®re des r√©sum√©s texte et Markdown pr√™ts pour les writeups CTF.
# PRESENTATION_START
# **Mon-Nmap ‚Äî Outil d'√©num√©ration Nmap pour CTF / pentest**
#
# Ce script automatise la s√©quence de scans que j'ex√©cute syst√©matiquement en phase
# d'√©num√©ration d'un challenge HTB : scan TCP complet (1-65535), scan "aggressif" (-A)
# sur les ports d√©tect√©s, et scan UDP (top-20 ou complet via --udp-all).
#
# Ajouts version 1.0.2 :
# - options NSE cibl√©es (activables) : --nse-web, --nse-smb, --nse-vuln, --nse-brute, --nse-all, --nse-ssl
# - option --analyze : lance le script compagnon mon-nmap-analyze.sh si pr√©sent
#
# Objectifs p√©dagogiques et pratiques :
# - standardiser la collecte d'informations initiale afin d'avoir des r√©sultats comparables
#   d'une machine √† l'autre ;
# - produire des sorties synth√©tiques pr√™tes √† √™tre ins√©r√©es dans un writeup
#   (`summary.txt` brut + `summary.md` √©pur√© pour Hugo) ;
# - comportement conservateur : le script cr√©e un dossier de r√©sultats `nmap_<cible>` (ex. `nmap_mon-site.htb`)
#   et y place tous les fichiers de sortie ‚Äî il n'√©crase rien en dehors de ce dossier.
#
# Points notables :
# - option `--udp-all` : lance un scan UDP complet (-p-) au lieu du top 20 ;
# - les fichiers produits : 1-port_scan.txt, 2-aggressive_scan.txt, 3-udp_scan.txt,
#   4-nse-web.txt, 4-nse-smb.txt, 4-nse-vuln.txt, 4-nse-ssl.txt, 4-nse-brute.txt, summary.txt (brut), summary.md (version markdown et synth√©tique) ;
# - usage type : `./mon-nmap mon-site.htb` ou `./mon-nmap --udp-all --nse-web mon-site.htb`
# PRESENTATION_END
# mon-nmap ‚Äî scan agressif (-A) + summary.txt et summary.md (Hugo, sans emojis)
# √âtapes : [1] TCP full -> [2] Aggressive (-A) -> [3] UDP (optionnel) -> [4] NSE cibl√©s (optionnel)
# R√®gles : on ignore 'open|filtered' (on ne garde que 'udp ... open' strict)

set -euo pipefail

# --- version helpers ---
_self_path="${BASH_SOURCE[0]:-$0}"
if command -v readlink >/dev/null 2>&1; then
  _resolved="$(readlink -f -- "$_self_path" 2>/dev/null || true)"
  [ -n "$_resolved" ] && _self_path="$_resolved"
fi
_self_base="$(basename "$_self_path")"

_version_str() {
  local v
  v="$(awk -F= '/^# *VERSION *=/ { gsub(/\r$/,"",$2); print $2; exit }' "$_self_path" 2>/dev/null || true)"
  [ -n "$v" ] || v="0.0.0"
  printf '%s %s\n' "$_self_base" "$v"
}

_print_version_and_exit() { _version_str; exit 0; }
# -----------------------

usage(){
  cat <<USAGE
Usage: $(basename "$0") [OPTIONS] <IP_CIBLE>

Options:
  --udp-all       Scan UDP complet (-p-) au lieu du top 20
  --nse-web       Lancer scripts NSE HTTP utiles (http-title,http-enum,http-methods,http-headers,http-vhosts,ssl-cert)
  --nse-smb       Lancer scripts NSE SMB (smb-enum-shares,smb-os-discovery,smb-enum-users)
  --nse-vuln      Lancer --script=vuln (potentiellement intrusif / lent)
  --nse-brute     Lancer scripts brute (ssh-brute,http-brute,ftp-brute,smb-brute) ‚Äî utilis√© uniquement en lab/CTF
  --nse-all       √âquivaut √† --nse-web --nse-smb --nse-vuln
  --nse-ssl       Lancer scripts SSL/TLS (pattern "ssl*") sur les ports d√©tect√©s comme SSL/HTTPS
  --analyze       Lancer le script compagnon mon-nmap-analyze.sh sur le dossier de r√©sultats si pr√©sent
  -V, --version   Afficher la version
  -h, --help      Afficher cette aide

Exemples:
  $(basename "$0") --nse-web target.htb
  $(basename "$0") --udp-all --nse-all --nse-ssl --analyze 10.129.147.115
USAGE
}

if [[ "${1:-}" == "--version" || "${1:-}" == "-V" ]]; then
  _print_version_and_exit
fi

if [[ "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
  _version_str
  usage
  exit 0
fi

# Couleurs (terminal)
RED='\033[1;31m'; GREEN='\033[1;32m'; YELLOW='\033[1;33m'
CYAN='\033[1;36m'; BLUE='\033[1;34m'; BOLD='\033[1m'; NC='\033[0m'

# Options par d√©faut
FULL_UDP=false
NSE_WEB=false
NSE_SMB=false
NSE_VULN=false
NSE_BRUTE=false
NSE_SSL=false
DO_ANALYZE=false

# Parse options simples (positionnelles limit√©es) - accepte plusieurs options avant la cible
while [[ "${1:-}" =~ ^- ]]; do
  case "$1" in
    --udp-all) FULL_UDP=true; shift ;;
    --nse-web) NSE_WEB=true; shift ;;
    --nse-smb) NSE_SMB=true; shift ;;
    --nse-vuln) NSE_VULN=true; shift ;;
    --nse-brute) NSE_BRUTE=true; shift ;;
    --nse-all) NSE_WEB=true; NSE_SMB=true; NSE_VULN=true; shift ;;
    --nse-ssl) NSE_SSL=true; shift ;;
    --analyze) DO_ANALYZE=true; shift ;;
    -V|--version) _print_version_and_exit ;;
    -h|--help) _version_str; usage; exit 0 ;;
    *) echo -e "${RED}Option inconnue: $1${NC}"; usage; exit 1 ;;
  esac
done

# IP cible
if [ "$#" -ne 1 ]; then
  echo -e "${RED}‚ùå Usage: ${BOLD}$(basename "$0") [options] <IP_CIBLE>${NC}"
  exit 1
fi
IP=$1

# Dossiers/fichiers
DOSSIER="nmap_$IP"
mkdir -p "$DOSSIER"
F1="$DOSSIER/1-port_scan.txt"
F2="$DOSSIER/2-aggressive_scan.txt"
F3="$DOSSIER/3-udp_scan.txt"
# fichiers NSE (√©ventuels)
F4_WEB="$DOSSIER/4-nse-web.txt"
F4_SMB="$DOSSIER/4-nse-smb.txt"
F4_VULN="$DOSSIER/4-nse-vuln.txt"
F4_SSL="$DOSSIER/4-nse-ssl.txt"
F4_BRUTE="$DOSSIER/4-nse-brute.txt"
FSUM_TXT="$DOSSIER/summary.txt"
FSUM_MD="$DOSSIER/summary.md"

START_TIME=$SECONDS
echo -e "${BLUE}üîç Initialisation du scan Nmap sur ${BOLD}$IP${NC}"

# [1] TCP full port scan
echo -e "${YELLOW}[1] Scan de tous les ports TCP (1-65535)...${NC}"
nmap -p- --min-rate 10000 -T4 --max-retries 3 -oN "$F1" "$IP" > /dev/null 2>&1
TCP_OPEN_LINES="$(LC_ALL=C grep -E '^[[:space:]]*[0-9]+/tcp[[:space:]]+open([[:space:]]|$)' "$F1" || true)"
PORTS="$(printf '%s\n' "$TCP_OPEN_LINES" | cut -d'/' -f1 | paste -sd, - 2>/dev/null || true)"
if [[ -z "${PORTS:-}" ]]; then
  echo -e "${RED}‚ùå Aucun port TCP ouvert d√©tect√©.${NC}"
  exit 1
fi
echo -e "${GREEN}‚úî Ports TCP d√©tect√©s : ${BOLD}$PORTS${NC}"

# [2] Aggressive (-A)
echo -e "${YELLOW}[2] Scan agressif avec d√©tection OS (-A)...${NC}"
nmap -A -T4 -p"$PORTS" --max-retries 3 -oN "$F2" "$IP" > /dev/null 2>&1

# Fonction utilitaire : lancer un nmap --script cibl√© si la variable est vraie
run_nse_if() {
  local flag="$1"; shift
  local scripts="$1"; shift
  local out="$1"; shift
  if $flag; then
    echo -e "${YELLOW}[4] Lancement NSE: ${scripts} ...${NC}"
    if [[ -n "${PORTS:-}" ]]; then
      nmap -sV -p"$PORTS" --script "$scripts" -T4 --max-retries 2 -oN "$out" "$IP" > /dev/null 2>&1 || true
      echo -e "${GREEN}‚úî NSE termin√© : ${out}${NC}"
    else
      echo -e "${YELLOW}‚ö† Pas de ports connus pour lancer les scripts NSE.${NC}"
    fi
  fi
}

# Fonction sp√©cifique SSL
run_nse_ssl_if() {
  $NSE_SSL || return 0

  mapfile -t ports_by_service < <(awk '
    /^[[:space:]]*[0-9]+\/tcp[[:space:]]+open/ {
      port=$1;
      svc=$3;
      gsub(/\/tcp/,"",port);
      if (svc ~ /^https$/ || svc ~ /^ssl\//) {
        print port
      }
    }' "$F2" 2>/dev/null | sort -n | uniq)

  declare -A open_tcp
  while read -r line; do
    p="${line%%/*}"
    [[ -n "$p" ]] && open_tcp["$p"]=1
  done < <(LC_ALL=C grep -E '^[[:space:]]*[0-9]+/tcp[[:space:]]+open([[:space:]]|$)' "$F1" 2>/dev/null || true)

  for p in 443 8443 9443 10443 4443; do
    if [[ ${open_tcp[$p]+x} ]]; then
      ports_by_service+=("$p")
    fi
  done

  if [[ ${#ports_by_service[@]} -eq 0 ]]; then
    echo -e "${YELLOW}‚ö† Aucun port explicitement SSL/HTTPS d√©tect√© ‚Äî passe ssl* saut√©e.${NC}"
    return 0
  fi
  SSL_PORTS="$(printf "%s\n" "${ports_by_service[@]}" | sort -n | uniq | paste -sd, -)"
  echo -e "${YELLOW}[4] Lancement NSE (SSL/TLS) sur ports: ${BOLD}${SSL_PORTS}${NC}"
  nmap -sV -p"$SSL_PORTS" --script "ssl*" -T4 --max-retries 2 -oN "$F4_SSL" "$IP" > /dev/null 2>&1 || true
  echo -e "${GREEN}‚úî NSE SSL/TLS termin√© : ${F4_SSL}${NC}"
}

# [3] UDP
if $FULL_UDP; then
  echo -e "${YELLOW}[3] Scan UDP complet (-p-)...${NC}"
  nmap -sU -p- -T4 --max-retries 3 --scan-delay 5ms --host-timeout 20m -oN "$F3" "$IP"
else
  echo -e "${YELLOW}[3] Scan UDP top 20...${NC}"
  nmap -sU --top-ports 20 -T4 --max-retries 2 --host-timeout 10m -oN "$F3" "$IP" > /dev/null 2>&1
fi
echo -e "${GREEN}‚úî Scan UDP termin√©.${NC}"
echo -e "${GREEN}${BOLD}‚úî Tous les scans sont termin√©s !${NC}"

# [4] Scans NSE optionnels (ex√©cut√©s seulement si demand√©)
run_nse_if $NSE_WEB "http-title,http-enum,http-methods,http-headers,http-vhosts,ssl-cert" "$F4_WEB"
run_nse_if $NSE_SMB "smb-enum-shares,smb-os-discovery,smb-enum-users" "$F4_SMB"
run_nse_if $NSE_VULN "vuln" "$F4_VULN"
run_nse_if $NSE_BRUTE "ssh-brute,http-brute,ftp-brute,smb-brute" "$F4_BRUTE"
run_nse_ssl_if

# Extractions (inchang√©es)
OS_LINE="$(grep -i 'OS details:' "$F2" | head -n1 | sed 's/OS details:[[:space:]]*//I' || true)"
UDP_OPEN_ONLY="$(LC_ALL=C grep -E '^[[:space:]]*[0-9]+/udp[[:space:]]+open([[:space:]]|$)' "$F3" || true)"
TCP_OPEN_FROM_F2="$(LC_ALL=C grep -E '^[[:space:]]*[0-9]+/tcp[[:space:]]+open([[:space:]]|$)' "$F2" || true)"
TCP_CSV="$(printf '%s\n' "$TCP_OPEN_FROM_F2" | cut -d'/' -f1 | paste -sd, - 2>/dev/null || true)"
UDP_CSV=""
[[ -n "$UDP_OPEN_ONLY" ]] && UDP_CSV="$(printf '%s\n' "$UDP_OPEN_ONLY" | cut -d'/' -f1 | paste -sd, - 2>/dev/null || true)"

# Affichage terminal (inchang√©)
echo -e "\n${CYAN}${BOLD}üìÑ R√âSUM√â DES SERVICES TCP D√âTECT√âS :${NC}\n"
i=1; inside_block=false
while IFS= read -r line; do
  if [[ "$line" =~ ^[0-9]+/tcp[[:space:]]+open([[:space:]]|$) ]]; then
    printf "  [#%d] %s\n" "$i" "$line"
    i=$((i+1)); inside_block=true
  elif [[ "$inside_block" == true && "$line" =~ ^[\|_] ]]; then
    line=${line#|_}; line=${line#|}; printf "      ‚Üí %s\n" "$line"
  else
    inside_block=false
  fi
done < "$F2"

if [[ -n "$UDP_OPEN_ONLY" ]]; then
  echo -e "\n${CYAN}${BOLD}üìÑ R√âSUM√â DES SERVICES UDP D√âTECT√âS :${NC}\n"
  echo "$UDP_OPEN_ONLY" | nl -w2 -s'. ' | while read -r line; do
    NUM=$(echo "$line" | cut -d'.' -f1)
    printf "  [#%s] %s\n" "$NUM" "$(echo "$line" | cut -d' ' -f2-)"
  done
fi

if [[ -n "$OS_LINE" ]]; then
  echo -e "\n${BLUE}${BOLD}üñ•Ô∏è  D√©tection du syst√®me d‚Äôexploitation :${NC} $OS_LINE"
else
  echo -e "\n${BLUE}üñ•Ô∏è  OS non identifi√© par Nmap.${NC}"
fi

# summary.txt (brut, inchang√©)
{
  echo "==== R√©sum√© $IP ($(date '+%F %T')) ===="
  echo
  echo "[1-port_scan] TCP open :"
  [[ -n "$TCP_OPEN_LINES" ]] && echo "$TCP_OPEN_LINES"
  echo
  echo "[2-aggressive_scan] D√©tails (open) :"
  LC_ALL=C grep -E '^[[:space:]]*[0-9]+/(tcp|udp)[[:space:]]+open([[:space:]]|$)' "$F2" || true
  echo
  if [[ -n "$OS_LINE" ]]; then
    echo "OS: $OS_LINE"
    echo
  fi
  if [[ -n "$UDP_OPEN_ONLY" ]]; then
    echo "[3-udp_scan] UDP ouverts :"
    echo "$UDP_OPEN_ONLY"
    echo
  fi
  echo "R√©sum√© des services d√©tect√©s (TCP) :"
  i=1; inside_block=false
  while IFS= read -r line; do
    if [[ "$line" =~ ^[0-9]+/tcp[[:space:]]+open([[:space:]]|$) ]]; then
      printf "  [#%d] %s\n" "$i" "$line"
      i=$((i+1)); inside_block=true
    elif [[ "$inside_block" == true && "$line" =~ ^[\|_] ]]; then
      line=${line#|_}; line=${line#|}; printf "      ‚Üí %s\n" "$line"
    else
      inside_block=false
    fi
  done < "$F2"
  echo
  [[ -n "$TCP_CSV" ]] && { echo "TCP open (CSV) : $TCP_CSV"; echo; }
  [[ -n "$UDP_CSV" ]] && { echo "UDP open (CSV) : $UDP_CSV"; echo; }
} > "$FSUM_TXT"

# summary.md (Hugo) ‚Äî inchang√©
{
  echo "### Scan initial"
  echo

  echo "#### Services d√©tect√©s"
  i=1
  in_block=false
  have_sshhk=0; ssh_types=""
  http_title=""; server_hdr=""; ssl_cn=""
  current_main=""

  flush_item() {
    if [[ -n "${current_main:-}" ]]; then
      echo "$i. **$current_main**"
      [[ -n "$http_title" ]] && echo "   ‚Üí http-title: $http_title  "
      [[ -n "$server_hdr" ]] && echo "   ‚Üí http-server-header: $server_hdr  "
      [[ -n "$ssl_cn"    ]] && echo "   ‚Üí ssl-cert CN: $ssl_cn  "
      if [[ $have_sshhk -eq 1 ]]; then
        ssh_types_clean="$(echo "$ssh_types" | tr '[:lower:]' '[:upper:]' | sed 's/ \{1,\}/ /g; s/^, *//; s/, *,/, /g')"
        echo "   ‚Üí ssh-hostkey: $ssh_types_clean  "
      fi
      echo
      i=$((i+1))
    fi
    current_main=""; in_block=false; have_sshhk=0; ssh_types=""; http_title=""; server_hdr=""; ssl_cn=""
  }

  while IFS= read -r line; do
    if [[ "$line" =~ ^[0-9]+/tcp[[:space:]]+open([[:space:]]|$) ]]; then
      flush_item
      current_main="$line"
      in_block=true
      continue
    fi
    if $in_block && [[ "$line" =~ ^[\|_] ]]; then
      sub="${line#|_}"; sub="${sub#|}"; sub="${sub#" "}"
      if [[ "$sub" =~ ^ssh-hostkey: ]]; then
        have_sshhk=1
      elif [[ $have_sshhk -eq 1 ]]; then
        if [[ "$sub" =~ \(RSA\) ]]; then ssh_types="$ssh_types, RSA"; fi
        if [[ "$sub" =~ \(ECDSA\) ]]; then ssh_types="$ssh_types, ECDSA"; fi
        if [[ "$sub" =~ \(ED25519\) ]]; then ssh_types="$ssh_types, ED25519"; fi
      elif [[ "$sub" =~ ^http-title: ]]; then
        http_title="$(echo "$sub" | sed 's/^http-title:[[:space:]]*//')"
      elif [[ "$sub" =~ ^http-server-header: ]]; then
        server_hdr="$(echo "$sub" | sed 's/^http-server-header:[[:space:]]*//')"
      elif [[ "$sub" =~ ^ssl-cert: ]]; then
        if [[ "$sub" =~ commonName=([^/[:space:]]+) ]]; then
          ssl_cn="${BASH_REMATCH[1]}"
        elif [[ "$sub" =~ CN=([^/[:space:]]+) ]]; then
          ssl_cn="${BASH_REMATCH[1]}"
        fi
      elif [[ "$sub" =~ ^Subject: ]]; then
        if [[ "$sub" =~ commonName=([^/[:space:]]+) ]]; then
          ssl_cn="${BASH_REMATCH[1]}"
        elif [[ "$sub" =~ CN=([^/[:space:]]+) ]]; then
          ssl_cn="${BASH_REMATCH[1]}"
        fi
      fi
    else
      in_block=false
    fi
  done < "$F2"
  flush_item

  echo "#### OS d√©tect√©"
  if [[ -n "$OS_LINE" ]]; then
    echo "\`$OS_LINE\`"
  else
    echo "\`Non identifi√©\`"
  fi
  echo

  echo "#### UDP"
  if [[ -n "$UDP_CSV" ]]; then
    echo "- Ports ouverts (CSV) : \`$UDP_CSV\`"
  else
    if $FULL_UDP; then
      echo "*(aucun port \`open\` strict d√©tect√© ; scan complet \`-p-\`)*"
    else
      echo "*(aucun port \`open\` strict d√©tect√© ; scan top 20)*"
    fi
  fi
  echo

  echo "#### Vue synth√©tique"
  echo "- **TCP ouverts :** \`${TCP_CSV:-}\`"
  if [[ -n "$UDP_CSV" ]]; then
    echo "- **UDP ouverts :** \`${UDP_CSV}\`"
  else
    echo "- **UDP ouverts :** *(aucun open strict)*"
  fi
} > "$FSUM_MD"

ELAPSED=$((SECONDS - START_TIME)); MINS=$((ELAPSED/60)); SECS=$((ELAPSED%60))
echo -e "\n${CYAN}üßæ  R√©sum√© texte :${NC} ${BOLD}$FSUM_TXT${NC}"
echo -e "${CYAN}üßæ  R√©sum√© Markdown :${NC} ${BOLD}$FSUM_MD${NC}"
echo -e "${BLUE}üìÅ R√©sultats complets : ${BOLD}$DOSSIER/${NC}"
echo -e "${GREEN}‚è±Ô∏è  Dur√©e totale du scan : ${BOLD}${MINS}m ${SECS}s${NC}"

# Lancement optionnel de l'analyse compagnon si demand√©
if $DO_ANALYZE; then
  if command -v ./mon-nmap-analyze.sh >/dev/null 2>&1; then
    echo -e "${CYAN}üîé Analyse post-scan (heuristique vuln√©rabilit√©s)...${NC}"
    ./mon-nmap-analyze.sh --dir "$DOSSIER" || true
  else
    echo -e "${YELLOW}‚ö† --analyze demand√© mais mon-nmap-analyze.sh introuvable dans le dossier courant.${NC}"
  fi
fi
